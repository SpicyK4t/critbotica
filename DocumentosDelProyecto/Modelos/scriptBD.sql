-- MySQL Script generated by MySQL Workbench
-- Fri 25 Sep 2015 01:11:35 AM CDT
-- Model: New Model    Version: 1.0
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema crit
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `crit` ;
CREATE SCHEMA IF NOT EXISTS `crit` DEFAULT CHARACTER SET latin1 ;
USE `crit` ;

-- -----------------------------------------------------
-- Table `crit`.`roles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `crit`.`roles` ;

CREATE TABLE IF NOT EXISTS `crit`.`roles` (
  `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(32) NOT NULL,
  `description` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uniq_name` (`name` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 3
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `crit`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `crit`.`users` ;

CREATE TABLE IF NOT EXISTS `crit`.`users` (
  `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(254) NOT NULL,
  `username` VARCHAR(32) NOT NULL DEFAULT '',
  `password` VARCHAR(64) NOT NULL,
  `logins` INT(10) UNSIGNED NOT NULL DEFAULT '0',
  `last_login` INT(10) UNSIGNED NULL DEFAULT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `apellido` VARCHAR(70) NOT NULL,
  `habilitado` TINYINT(1) NOT NULL DEFAULT 1,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uniq_username` (`username` ASC),
  UNIQUE INDEX `uniq_email` (`email` ASC))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `crit`.`roles_users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `crit`.`roles_users` ;

CREATE TABLE IF NOT EXISTS `crit`.`roles_users` (
  `user_id` INT(10) UNSIGNED NOT NULL,
  `role_id` INT(10) UNSIGNED NOT NULL,
  PRIMARY KEY (`user_id`, `role_id`),
  INDEX `fk_role_id` (`role_id` ASC),
  CONSTRAINT `roles_users_ibfk_1`
    FOREIGN KEY (`user_id`)
    REFERENCES `crit`.`users` (`id`)
    ON DELETE CASCADE,
  CONSTRAINT `roles_users_ibfk_2`
    FOREIGN KEY (`role_id`)
    REFERENCES `crit`.`roles` (`id`)
    ON DELETE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `crit`.`user_tokens`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `crit`.`user_tokens` ;

CREATE TABLE IF NOT EXISTS `crit`.`user_tokens` (
  `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` INT(11) UNSIGNED NOT NULL,
  `user_agent` VARCHAR(40) NOT NULL,
  `token` VARCHAR(40) NOT NULL,
  `created` INT(10) UNSIGNED NOT NULL,
  `expires` INT(10) UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uniq_token` (`token` ASC),
  INDEX `fk_user_id` (`user_id` ASC),
  INDEX `expires` (`expires` ASC),
  CONSTRAINT `user_tokens_ibfk_1`
    FOREIGN KEY (`user_id`)
    REFERENCES `crit`.`users` (`id`)
    ON DELETE CASCADE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `crit`.`medicamentos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `crit`.`medicamentos` ;

CREATE TABLE IF NOT EXISTS `crit`.`medicamentos` (
  `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre_distintivo` VARCHAR(35) NOT NULL,
  `nombre_generico` VARCHAR(50) NOT NULL,
  `presentacion` VARCHAR(20) NOT NULL,
  `stock_minimo` INT(3) UNSIGNED NOT NULL DEFAULT 0,
  `user_id` INT(11) UNSIGNED NOT NULL,
  `grupo` INT(2) UNSIGNED NOT NULL,
  `habilitado` TINYINT(1) NOT NULL DEFAULT 1,
  `imagen_medicamento` VARCHAR(150) NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_medicamentos_users1_idx` (`user_id` ASC),
  CONSTRAINT `fk_medicamentos_users1`
    FOREIGN KEY (`user_id`)
    REFERENCES `crit`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `crit`.`entradas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `crit`.`entradas` ;

CREATE TABLE IF NOT EXISTS `crit`.`entradas` (
  `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `medicamento_id` INT(11) UNSIGNED NOT NULL,
  `cantidad` INT(5) UNSIGNED NOT NULL DEFAULT 0,
  `caducidad` DATE NOT NULL,
  `lote` VARCHAR(20) NOT NULL,
  `no_registro` VARCHAR(20) NOT NULL,
  `user_id` INT(11) UNSIGNED NOT NULL,
  `fecha_entrada` DATETIME NOT NULL,
  `observaciones` TEXT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_entradas_medicamentos1_idx` (`medicamento_id` ASC),
  INDEX `fk_entradas_users1_idx` (`user_id` ASC),
  CONSTRAINT `fk_entradas_medicamentos1`
    FOREIGN KEY (`medicamento_id`)
    REFERENCES `crit`.`medicamentos` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_entradas_users1`
    FOREIGN KEY (`user_id`)
    REFERENCES `crit`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `crit`.`doctors`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `crit`.`doctors` ;

CREATE TABLE IF NOT EXISTS `crit`.`doctors` (
  `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre_doctor` VARCHAR(36) NOT NULL,
  `apellido_doctor` VARCHAR(36) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `crit`.`pacientes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `crit`.`pacientes` ;

CREATE TABLE IF NOT EXISTS `crit`.`pacientes` (
  `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre_paciente` VARCHAR(36) NOT NULL,
  `apellido_paciente` VARCHAR(36) NOT NULL,
  `carnet` VARCHAR(45) NOT NULL,
  `nombre_tutor` VARCHAR(36) NOT NULL,
  `apellido_tutor` VARCHAR(36) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `carnet_UNIQUE` (`carnet` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `crit`.`salidas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `crit`.`salidas` ;

CREATE TABLE IF NOT EXISTS `crit`.`salidas` (
  `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `entrada_id` INT(11) UNSIGNED NOT NULL,
  `cantidad` INT(5) UNSIGNED NOT NULL,
  `fecha_salida` DATETIME NOT NULL,
  `user_id` INT(11) UNSIGNED NOT NULL,
  `doctor_id` INT(11) UNSIGNED NOT NULL,
  `paciente_id` INT(11) UNSIGNED NOT NULL,
  `observaciones` TEXT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_salidas_entradas1_idx` (`entrada_id` ASC),
  INDEX `fk_salidas_users1_idx` (`user_id` ASC),
  INDEX `fk_salidas_doctors1_idx` (`doctor_id` ASC),
  INDEX `fk_salidas_pacientes1_idx` (`paciente_id` ASC),
  CONSTRAINT `fk_salidas_entradas1`
    FOREIGN KEY (`entrada_id`)
    REFERENCES `crit`.`entradas` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_salidas_users1`
    FOREIGN KEY (`user_id`)
    REFERENCES `crit`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_salidas_doctors1`
    FOREIGN KEY (`doctor_id`)
    REFERENCES `crit`.`doctors` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_salidas_pacientes1`
    FOREIGN KEY (`paciente_id`)
    REFERENCES `crit`.`pacientes` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `crit` ;

-- -----------------------------------------------------
-- Placeholder table for view `crit`.`estadomedicamentos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `crit`.`estadomedicamentos` (`id` INT, `nombre_distintivo` INT, `existencia` INT);

-- -----------------------------------------------------
-- Placeholder table for view `crit`.`medicamentosexistencia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `crit`.`medicamentosexistencia` (`id` INT, `nombre_distintivo` INT, `existencia` INT);

-- -----------------------------------------------------
-- Placeholder table for view `crit`.`entradas_salidas_restantes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `crit`.`entradas_salidas_restantes` (`id` INT, `medicamento_id` INT, `cantidad` INT, `caducidad` INT, `salidas` INT, `restante` INT);

-- -----------------------------------------------------
-- Placeholder table for view `crit`.`doctors_nombrecompleto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `crit`.`doctors_nombrecompleto` (`id` INT, `nombre_completo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `crit`.`pacientes_nombrecompleto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `crit`.`pacientes_nombrecompleto` (`id` INT, `nombre_completo` INT);

-- -----------------------------------------------------
-- View `crit`.`estadomedicamentos`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `crit`.`estadomedicamentos` ;
DROP TABLE IF EXISTS `crit`.`estadomedicamentos`;
USE `crit`;
CREATE  OR REPLACE VIEW `estadomedicamentos` AS SELECT id, nombre_distintivo, ((SELECT COALESCE(sum(entradas.cantidad), 0) FROM entradas WHERE medicamento_id=medicamentos.id) - (SELECT COALESCE(sum((select sum(salidas.cantidad) FROM salidas WHERE salidas.entrada_id = entradas.id)), 0) FROM entradas WHERE medicamento_id=medicamentos.id)) as existencia FROM medicamentos
;

-- -----------------------------------------------------
-- View `crit`.`medicamentosexistencia`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `crit`.`medicamentosexistencia` ;
DROP TABLE IF EXISTS `crit`.`medicamentosexistencia`;
USE `crit`;
CREATE  OR REPLACE VIEW `medicamentosexistencia` AS SELECT id, nombre_distintivo, ((SELECT COALESCE(sum(entradas.cantidad), 0) FROM entradas WHERE medicamento_id=medicamentos.id) - (SELECT COALESCE(sum((select sum(salidas.cantidad) FROM salidas WHERE salidas.entrada_id = entradas.id)), 0) FROM entradas WHERE medicamento_id=medicamentos.id)) as existencia FROM medicamentos WHERE ((SELECT COALESCE(sum(entradas.cantidad), 0) FROM entradas WHERE medicamento_id=medicamentos.id) - (SELECT COALESCE(sum((select sum(salidas.cantidad) FROM salidas WHERE salidas.entrada_id = entradas.id)), 0) FROM entradas WHERE medicamento_id=medicamentos.id)) > 0 
;

-- -----------------------------------------------------
-- View `crit`.`entradas_salidas_restantes`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `crit`.`entradas_salidas_restantes` ;
DROP TABLE IF EXISTS `crit`.`entradas_salidas_restantes`;
USE `crit`;
CREATE  OR REPLACE VIEW `entradas_salidas_restantes` AS SELECT id, medicamento_id, cantidad, caducidad, (SELECT COALESCE(sum(cantidad), 0) FROM salidas WHERE salidas.entrada_id=entradas.id) as salidas, (cantidad - (SELECT COALESCE(sum(cantidad), 0) FROM salidas WHERE salidas.entrada_id=entradas.id)) as restante FROM `entradas` WHERE (cantidad - (SELECT COALESCE(sum(cantidad), 0) FROM salidas WHERE salidas.entrada_id=entradas.id)) > 0 
;

-- -----------------------------------------------------
-- View `crit`.`doctors_nombrecompleto`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `crit`.`doctors_nombrecompleto` ;
DROP TABLE IF EXISTS `crit`.`doctors_nombrecompleto`;
USE `crit`;
CREATE  OR REPLACE VIEW `doctors_nombrecompleto` AS SELECT id, CONCAT(apellido_doctor, ' ', nombre_doctor) as nombre_completo FROM `doctors` 
;

-- -----------------------------------------------------
-- View `crit`.`pacientes_nombrecompleto`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `crit`.`pacientes_nombrecompleto` ;
DROP TABLE IF EXISTS `crit`.`pacientes_nombrecompleto`;
USE `crit`;
CREATE  OR REPLACE VIEW `pacientes_nombrecompleto` AS SELECT id, CONCAT(apellido_paciente, ' ', nombre_paciente, ' (', carnet, ')') as nombre_completo FROM `pacientes` 
;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `crit`.`roles`
-- -----------------------------------------------------
START TRANSACTION;
USE `crit`;
INSERT INTO `crit`.`roles` (`id`, `name`, `description`) VALUES (1, 'login', 'Login privileges, granted after account confirmation');
INSERT INTO `crit`.`roles` (`id`, `name`, `description`) VALUES (2, 'admin', 'Administrative user, has access to everything.');

COMMIT;

